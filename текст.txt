1. Есть простая форма, данные с которой можно отправить с помощью XHR или fetch

2. По файлам
- index.html
	Простая формочка с подключением двух js файлов

- server.js
	Сервер, который будет принимать данные с формы, отвечать статусом 200 и возвращать json. 
	Т.к данные из формы будут приходить в формате FormData 

- xhr.js
	Сначала с помощью FormData собираем данные из формы, затем пишем ajax запрос.
	Который в случае успешного завершения запроса и положительного ответа от сервера, распарсить json и выведет в консоль
	В случае если ответ 404 выведется соответствующее сообщение. Если ответ отличен от 200 и 404 выведеться другое сообщение

- fetch.js
	Начало такое же.
	В фетч используется цепочка вызовов then
	При вызове, fetch возвращает промис, который когда получен ответ выполняет коллбэк с объектом res. 
	res.ok это короткая запись 200-299 ответов от сервера.
	Если ответ положительный, то коллбэк вернет реультат выполнения метода json на объекте res. Т.е распарсит json, который пришел в ответе от сервера.
	Если же ответ отрицательный, то коллбэк вернет промис в состоянии reject и передаст в него инфу об ошибке. Даллее управление переходит в блок catch

Cуществуют и другие методы:
https://developer.mozilla.org/ru/docs/Web/API/Fetch_API

Плюсы:
1. Работает на промисах, код более локаничен, отсутствие коллбэк хэллов
2. Более гибкая настройка (позволяет контролировать отправку куки и заголовков авторизации)

Минусы:
1. Нет возможности отмены запроса.
2. Не полная поддержка браузерами.


Выдержки с сайтов:
Обратите внимание, fetch спецификация отличается от jQuery.ajax() в основном двумя способами:

Promise возвращенный fetch() не отклонит состояние ошибки HTTP, даже если ответ HTTP 404 или 500.  
Вместо этого, он будет выполнен нормально (с установкой статуса ok  в false) 
и будет отклонять только при сбое сети или если что-либо помешало запросу выполниться.


По умолчанию, fetch не будет отправлять или получать файлы cookie с сервера, в результате чего запросы будут 
без проверки подлинности, если сайт основан на сохранении сессии пользователя 
(для потправки cookies в опции init должны быть установлены параметры доступа).

mode – одно из: «same-origin», «no-cors», «cors», указывает, в каком режиме кросс-доменности предполагается делать запрос.

credentials – одно из: «omit», «same-origin», «include», указывает, пересылать ли куки и заголовки авторизации вместе с запросом.
 omit - не передаются
 include - передаются

cache – одно из «default», «no-store», «reload», «no-cache», «force-cache», «only-if-cached», указывает, как кешировать запрос.
